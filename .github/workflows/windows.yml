name: Windows

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-2019
    env:
      QTVER: 6.5.1

    steps:
    - uses: actions/checkout@v3

    - name: Detect release tag
      shell: bash
      run: |
        TAG=${GITHUB_REF#refs/*/}
        if [[ "$TAG" == v*.*.* ]]; then
          VERSION=${TAG#v}
        else
          VERSION=$(git log -1 --format=%cd --date=format:%Y%m%d)_$(git rev-parse --short HEAD)
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Configure MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: win64
        spectre: true
        vsversion: 2019

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v3
      with:
        path: ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}-cache-qt-${{ env.QTVER }}

    - name: Install Qt
      shell: bash
      env:
        QTDIR: ${{ runner.workspace }}/Qt
      run: |
        if [ "${{ steps.cache-qt.outputs.cache-hit }}" != "true" ]; then
          pip install aqtinstall
          aqt install-qt -O $QTDIR windows desktop $QTVER win64_msvc2019_64
        fi
        echo "$QTDIR/$QTVER/msvc2019_64/bin" >> $GITHUB_PATH

    - name: Build
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX= ..
        nmake
        nmake install DESTDIR=appdir

    - name: Create package and installer
      shell: bash
      working-directory: 'build'
      env:
        PACKAGE_FILENAME: Qt_Desktop_Template-${{ env.VERSION }}-win64
      run: |
        windeployqt appdir/qt-desktop-template.exe
        7z a -tzip "$GITHUB_WORKSPACE/$PACKAGE_FILENAME.zip" ./appdir/*
        iscc //DMyAppDir=appdir //O"$GITHUB_WORKSPACE" //F"$PACKAGE_FILENAME" installer.iss
        echo "PACKAGE_FILENAME=$PACKAGE_FILENAME" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: |
          ${{ env.PACKAGE_FILENAME }}.zip
          ${{ env.PACKAGE_FILENAME }}.exe
